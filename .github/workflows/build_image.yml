name: Build and Publish Container Images (matrix)

on:
  workflow_call:

env:
  REGISTRY: ghcr.io

permissions:
  id-token: write
  packages: write

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      build_matrix: ${{ steps.set-matrix.outputs.build_matrix }}
      manifest_matrix: ${{ steps.set-matrix.outputs.manifest_matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install PyYAML and jq
        run: |
          pip install pyyaml
          sudo apt-get install -y jq

      - name: Generate build and manifest matrices
        id: set-matrix
        run: |
          MATRIX_JSON=$(python3 .ci/generate_matrix.py)
          echo "build_matrix=$(echo "$MATRIX_JSON" | jq -c '.build')" >> $GITHUB_OUTPUT
          echo "manifest_matrix=$(echo "$MATRIX_JSON" | jq -c '.manifest')" >> $GITHUB_OUTPUT

  build:
    needs: generate-matrix
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.build_matrix) }}
    env:
      TARGET_ARCH: ${{ matrix.arch }}
      GL_VERSION: ${{ matrix.os_version }}
      DRIVER_VERSION: ${{ matrix.driver_version }}
      KERNEL_TYPE: ${{ matrix.kernel_flavour }}

    steps:
      - uses: actions/checkout@v4

      - name: Download driver artifact
        uses: actions/download-artifact@v4
        with:
          name: driver-${{ matrix.os_version }}-${{ matrix.arch }}-${{ matrix.kernel_flavour }}-${{ matrix.driver_version }}
          path: ${{ github.workspace }}/out

      - name: Lowercase github.repository
        run: echo "FOLDER_NAME=${GITHUB_REPOSITORY@L}" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        run: |
          IMAGE_PATH="${{ env.REGISTRY }}/${{ env.FOLDER_NAME }}/driver"
          tag = $(make build-image KERNEL_TYPE=$KERNEL_TYPE \
          TARGET_ARCH=$TARGET_ARCH \
          GL_VERSION=$GL_VERSION \
          DRIVER_VERSION=$DRIVER_VERSION \
          IMAGE_PATH=${IMAGE_PATH} \
          DOCKER_CONTEXT=${{ github.workspace }})
          
          echo "TAG=$tag"
          
          #docker push ${{ env.REGISTRY }}/${{ env.FOLDER_NAME }}/${IMAGE_NAME}:${TAG1}
